parameters:
- name: dependsOn
  type: string
- name: environment
  type: string
- name: vmImage
  type: string
- name: privatePoolName
  type: string
- name: tfVersion
  type: string
- name: workingDirectory
  type: string
- name: serviceConnection
  type: string
- name: backendResourceGroupName
  type: string
- name: backendStorageAccountName
  type: string
- name: backendContainerName
  type: string
- name: checkFormat
  type: boolean

jobs:
  - job: "${{ parameters.environment}}TFBuild"
    dependsOn: ${{ parameters.dependsOn}}
    pool: 
      ${{ if ne(parameters.privatePoolName, '') }}:
        name: ${{ parameters.privatePoolName }}
      ${{ if eq(parameters.privatePoolName, '') }}:
        vmImage: ${{ parameters.vmImage }}
    displayName: "Terraform > install, init & plan"
    steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: ${{ parameters.tfVersion }}
        displayName: "Install > terraform"
      - task: TerraformTaskV3@3
        inputs:
          command: "init"
          workingDirectory: ${{  parameters.workingDirectory }}
          backendType: "azurerm"
          backendServiceArm: ${{ parameters.serviceConnection }}
          ensureBackend: true
          backendAzureRmResourceGroupName: ${{ parameters.backendResourceGroupName }}
          backendAzureRmStorageAccountName: ${{ parameters.backendStorageAccountName }}
          backendAzureRmContainerName: ${{ parameters.backendContainerName }}
          backendAzureRmKey: ${{ parameters.environment }}.tfstate
        displayName: "Run > terraform init"
      - task: TerraformTaskV3@3
        condition: eq('${{ parameters.checkFormat }}', 'true')
        inputs:
          provider: 'azurerm'
          environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
          workingDirectory: ${{  parameters.workingDirectory }}
          command: 'custom'
          customCommand: 'fmt'
          commandOptions: '-check'
          outputTo: 'console'
        displayName: "Run > terraform fmt"
      - task: TerraformTaskV3@3
        inputs:
          command: "validate"
          workingDirectory: ${{ parameters.workingDirectory }}
          environmentServiceName: ${{ parameters.serviceConnection }}
        displayName: "Run > terraform validate"
      - task: TerraformTaskV3@3
        inputs:
          command: "plan"
          workingDirectory: ${{ parameters.workingDirectory }}
          environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
          publishPlanResults: "PlanResults"
          commandOptions: "-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode -var backendAzureRmResourceGroupName=${{ parameters.backendResourceGroupName }} -var backendAzureRmStorageAccountName=${{ parameters.backendStorageAccountName }} -var backendAzureRmContainerName=${{ parameters.backendContainerName }} -var backendAzureRmKey=${{ parameters.environment }}.tfstate -var-file=${{ parameters.workingDirectory }}/variables/${{ parameters.environment }}.auto.tfvars"
        name: "plan"
        displayName: "Run > terraform plan"
      - bash: | 
          terraform show -json $(System.DefaultWorkingDirectory)/terraform.tfplan > terraform_plan.json
        workingDirectory: ${{ parameters.workingDirectory }}
        displayName: "Review Terraform Plan > Export JSON"
      - task: PublishBuildArtifacts@1
        displayName: "publish > terraform_plan.json"
        inputs:
          pathToPublish: "${{ parameters.workingDirectory }}/terraform_plan.json"
          ArtifactName: ${{ parameters.environment }}plan
      - task: PythonScript@0
        name: ProduceVars
        inputs:
          scriptSource: 'filePath'
          pythonInterpreter: '/usr/bin/python3'
          scriptPath: '$(System.DefaultWorkingDirectory)/tfcheck.py'
          workingDirectory: ${{ parameters.workingDirectory }}
        displayName: "Produce Execution Variables"